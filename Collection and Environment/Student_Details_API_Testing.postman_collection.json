{
	"info": {
		"_postman_id": "ee7ca196-fe93-482a-81b3-a96a35e70d82",
		"name": "Student_Details_API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31261931"
	},
	"item": [
		{
			"name": "Get Student List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = responseCode.code;\r",
							"\r",
							"switch (statusCode) { \r",
							"    case 200:\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        var jsonData = pm.response.json()\r",
							"        console.log(\"length: \"+jsonData.length)\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/studentsDetails",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				},
				"description": "1\\. A test case for Status Code Validation\n\n2\\. Verify the length of the response.\n\n**Sample Response:**\n\n\\[\n\n{\n\n\"id\": 526717,\n\n\"first_name\": \"Anna\",\n\n\"middle_name\": \"Banana\",\n\n\"last_name\": null,\n\n\"date_of_birth\":\"12/23/1990\"\n\n},\n\n{\n\n\"id\": 526716,\n\n\"first_name\": \"sample \",\n\n\"middle_name\": \"sample \",\n\n\"last_name\": \"sample \",\n\n\"date_of_birth\": \"sample \"\n\n},\n\n{\n\n\"id\": 526715,\n\n\"first_name\": \"Anna\",\n\n\"middle_name\": \"Banana last_name=Uzumaki\",\n\n\"last_name\": null,\n\n\"date_of_birth\": \"12/23/1990\"\n\n}\n\n\\]"
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = responseCode.code;\r",
							"\r",
							"switch (response) { \r",
							"    case 201:\r",
							"        var jsonData = pm.response.json()\r",
							"        pm.test(\"successfully create the student record.\")\r",
							"        pm.environment.set(\"ID\", jsonData.id)\r",
							"\r",
							"        pm.test(\"Status code is 201\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var first_name= pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"First Name\", first_name )\r",
							"console.log(first_name)\r",
							"\r",
							"var middle_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"Middle Name\", middle_name )\r",
							"console.log(middle_name)\r",
							"\r",
							"var last_name= pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"Last Name\", last_name )\r",
							"console.log(last_name)\r",
							"\r",
							"//Genrate random Date of Birth in MM/DD/YY Format and the DOB always fall in between 1990 and 1999\r",
							"function randomDate(start, end) {\r",
							"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1) + '-' + date.getDate() + '-' +  '199' + year_last_integer;\r",
							"pm.environment.set(\"Date of Birth\", formattedDate);\r",
							"console.log(\"DOB: \" + formattedDate);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"first_name\": \"{{First Name}}\", \r\n\"middle_name\": \"{{Middle Name}}\", \r\n\"last_name\": \"{{Last Name}}\", \r\n\"date_of_birth\": \"{{Date of Birth}}\" \r\n}\r\n\r\n \r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/studentsDetails",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				},
				"description": "1\\. A test case for Status Code Validation\n\n**Sample Response:**\n\n{\n\n\"id\": 526718,\n\n\"first_name\": \"sample string 2\",\n\n\"middle_name\": \"sample string 3\",\n\n\"last_name\": \"sample string 4\",\n\n\"date_of_birth\": \"sample string 5\"\n\n}"
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update Successful\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let status = jsonData.status;\r",
							"    pm.expect(status).to.eql(\"true\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":{{ID}},\r\n  \"first_name\": \"momtaz \",\r\n  \"middle_name\": \"sample \",\r\n  \"last_name\": \"sample \",\r\n  \"date_of_birth\": \"sample \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				},
				"description": "1. Update an student information."
			},
			"response": []
		},
		{
			"name": "Get Specific Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = responseCode.code;\r",
							"\r",
							"switch (response) { \r",
							"    case 200:\r",
							"    var jsonData = pm.response.json()\r",
							"pm.test('Status Code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test('ID Validation', function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('id'))\r",
							"});\r",
							"pm.test('First Name Validation', function () {\r",
							"    pm.expect(jsonData.first_name).to.eql(pm.environment.get('first_name'))\r",
							"});\r",
							"pm.test('Middle Name Validation', function () {\r",
							"    pm.expect(jsonData.middle_name).to.eql(pm.environment.get('middle_name'))\r",
							"});\r",
							"pm.test('Last Name Validation', function () {\r",
							"    pm.expect(jsonData.last_name).to.eql(pm.environment.get('last_name'))\r",
							"});\r",
							"pm.test('Date of Birth Validation', function () {\r",
							"    pm.expect(jsonData.date_of_birth).to.eql(pm.environment.get('date_of_birth'))\r",
							"});\r",
							"\r",
							"break;\r",
							"case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized-401\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden Access-403\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				},
				"description": "1.Verify the status code validatation.\n\n2.A test case for (id, first name, middle name, last name, date of birth) field value validation.\n\n**Sample Response:**\n\n{\n\n\"status\": \"true\",\n\n\"data\": {\n\n\"id\": 526716,\n\n\"first_name\": \"sample \",\n\n\"middle_name\": \"sample \",\n\n\"last_name\": \"sample \",\n\n\"date_of_birth\": \"sample \"\n\n}\n\n}"
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = responseCode.code;\r",
							"\r",
							"switch (response) { \r",
							"    case 200:\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        var jsonData = pm.response.json()\r",
							"        pm.test(\"successfully Created Technical Skills\", function(){\r",
							"            pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"        })\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var yearexp = pm.variables.replaceIn(\"{{$randomInt}}\") \r",
							"console.log(\"year of experience: \" +yearexp)\r",
							"pm.environment.set(\"yearexp\",yearexp)\r",
							" \r",
							" //Genrate random Date of Birth in MM/DD/YY Format and the DOB always fall in between 1990 and 1999\r",
							"function randomDate(start, end) {\r",
							"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1) + '-' + date.getDate() + '-' +  '199' + year_last_integer;\r",
							"pm.environment.set(\"lastused\", formattedDate);\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": \"1\", \r\n\"language\": [ \r\n\"English\", \r\n\"Math\" ,\r\n\"Bangla\"\r\n], \r\n\"yearexp\": \"{{yearexp}}\", \r\n\"lastused\": \"{{lastused}}\", \r\n\"st_id\": \"{{ID}}\" \r\n} \r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/technicalskills",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				},
				"description": "1.A test case for status code validatation.\n\n2\\. Generate a random date of birth.\n\n**Sample Response:**\n\n{\n\n\"status\": \"true\",\n\n\"msg\": \"Add data success\"\n\n}"
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = responseCode.code;\r",
							"\r",
							"switch (response) { \r",
							"    case 200:\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        var jsonData = pm.response.json()\r",
							"        pm.test(\"Successfully Created Student Address\", function(){\r",
							"            pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"        })\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" var HouseNumber =pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							" pm.environment.set(\"House_Number\", HouseNumber)\r",
							" console.log(HouseNumber)\r",
							"\r",
							" var City =pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							" pm.environment.set(\"City\", City)\r",
							" console.log(City)\r",
							"\r",
							" var State =pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							" pm.environment.set(\"State\", State)\r",
							" console.log(State)\r",
							"\r",
							" var Country =pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							" pm.environment.set(\"Country\", Country)\r",
							" console.log(Country)\r",
							"\r",
							" var PhoneNumber =pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							" pm.environment.set(\"PhoneNumber\", PhoneNumber)\r",
							" console.log(PhoneNumber)\r",
							"\r",
							" var Std_Code1 =pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							" pm.environment.set(\"Std_Code1\", Std_Code1)\r",
							" console.log(Std_Code1)\r",
							"\r",
							"  var Home1 =pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
							" pm.environment.set(\"Home1\", Home1)\r",
							" console.log(Home1)\r",
							"\r",
							" var Mobile1 =pm.variables.replaceIn(\"{{$randomPhoneNumberExt}}\")\r",
							" pm.environment.set(\"Mobile1\", Mobile1)\r",
							" console.log(Mobile1)\r",
							"\r",
							" var Std_Code2 =pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							" pm.environment.set(\"Std_Code2\", Std_Code2)\r",
							" console.log(Std_Code2)\r",
							"\r",
							" var Home2 =pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
							" pm.environment.set(\"Home2\", Home2)\r",
							" console.log(Home2)\r",
							"\r",
							"var Mobile2 =pm.variables.replaceIn(\"{{$randomPhoneNumberExt}}\")\r",
							" pm.environment.set(\"Mobile2\", Mobile2)\r",
							" console.log(Mobile2)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"Permanent_Address\": { \r\n\"House_Number\": \"{{House_Number}}\",\r\n\"City\": \"{{City}}\",\r\n \"State\": \"{{State}}\", \r\n\"Country\": \"{{Country}}\",\r\n\"PhoneNumber\": [ \r\n{ \r\n\"Std_Code\": \"{{Std_Code1}}\",\r\n\"Home\": \"{{Home1}}\",\r\n \"Mobile\": \"{{Mobile1}}\" \r\n},\r\n{ \r\n\"Std_Code\": \"{{Std_Code2}}\",\r\n\"Home\": \"{{Home2}}\", \r\n\"Mobile\": \"{{Mobile2}}\" \r\n} \r\n] \r\n},\r\n\"stId\": \"{{ID}}\" \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_Url}}/api/addresses",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				},
				"description": "1\\. A test case for Status Code Validation.\n\n2\\. A test case for status and message field value validation.\n\n**Sample Response:**\n\n {\n\n\"status\": \"true\",\n\n\"msg\": \"Add data success\"\n\n}"
			},
			"response": []
		},
		{
			"name": "Final Student Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = responseCode.code;\r",
							"\r",
							"switch (response) { \r",
							"    case 200:\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        var jsonData = pm.response.json()\r",
							"\r",
							"        pm.test('First Name Validation', function () {\r",
							"        pm.expect(jsonData.first_name).to.eql(pm.environment.get('first_name'))\r",
							"    });\r",
							"\r",
							"        pm.test('Middle Name Validation', function(){\r",
							"            pm.expect(jsonData.middle_name).to.eql(pm.environment.get('middle_name'))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Last Name Validation\", function(){\r",
							"            pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"last_name\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Date of Birth Validation\", function(){\r",
							"            pm.expect(jsonData.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"))\r",
							"        })\r",
							"\r",
							"              pm.test(\"Language Validation\", function(){\r",
							"            pm.expect(jsonData.data.TechnicalDetails[0].language[0]).to.eql(\"English\")\r",
							"            pm.expect(jsonData.data.TechnicalDetails[0].language[1]).to.eql(\"Math\")\r",
							"        })\r",
							"\r",
							"        pm.test(\"Year Of Experience Validation\", function(){\r",
							"            pm.expect(jsonData.data.TechnicalDetails[0].yearexp).to.eql(pm.environment.get(\"yearexp\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Last Used Date Validation\", function(){\r",
							"            pm.expect(jsonData.data.TechnicalDetails[0].lastused).to.eql(pm.environment.get(\"lastused\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"House Number Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.House_Number).to.eql(pm.environment.get(\"House_Number\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"City Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.City).to.eql(pm.environment.get(\"City\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"State Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.State).to.eql(pm.environment.get(\"State\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Country Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.Country).to.eql(pm.environment.get(\"Country\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Std Code Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Std_Code).to.eql(pm.environment.get(\"Std_Code1\"))\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[1].Std_Code).to.eql(pm.environment.get(\"Std_Code2\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Home Address Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Home).to.eql(pm.environment.get(\"Home1\"))\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[1].Home).to.eql(pm.environment.get(\"Home2\"))\r",
							"        })\r",
							"\r",
							"        pm.test(\"Mobile Validation\", function(){\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Mobile).to.eql(pm.environment.get(\"Mobile1\"))\r",
							"            pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[1].Mobile).to.eql(pm.environment.get(\"Mobile2\"))\r",
							"        })\r",
							"      \r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/FinalStudentDetails/{{ID}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{ID}}"
					]
				},
				"description": "1\\. A test case for Status Code Validation.\n\n2\\. A test case for (Language, Year of Experience, House Number, City, Country, Mobile, Current Address) field value validation.\n\n**Sample Response:**\n\n{ \n\n\"status\": \"true\", \n\n\"data\": { \n\n\"first_name\": \"test\", \n\n\"middle_name\": \"123\", \n\n\"last_name\": \"sample string 4\", \"date_of_birth\": \"sample string 5\", \"TechnicalDetails\": \\[ \n\n{ \n\n\"id\": 89801, \n\n\"language\": \\[\n\n\"sample string 1\", \n\n\"sample string 2\" \n\n\\], \n\n\"yearexp\": \"sample string 2\", \n\n\"lastused\": \"sample string 3\",\n\n\"st_id\": \"4165425\" \n\n} \n\n\\], \n\n\"Address\": \\[ \n\n{ \n\n\"Permanent_Address\": { \n\n\"House_Number\": \"sample string 1\", \n\n\"City\": \"sample string 2\", \n\n\"State\": \"sample string 3\", \n\n\"Country\": \"sample string 4\", \n\n\"PhoneNumber\": \\[ \n\n{ \n\n\"Std_Code\": \"101020\", \n\n\"Home\": \"Dhaka\", \n\n\"Mobile\": \"123456789\" \n\n}, \n\n{ \n\n\"Std_Code\": \"sample string 1\", \n\n\"Home\": \"sample string 2\", \n\n\"Mobile\": \"sample string 3\" \n\n} \n\n\\] \n\n}, \n\n\"Current_Address\": **null**, \n\n\"stId\": \"4165425\" \n\n} \n\n\\] \n\n} \n\n}"
			},
			"response": []
		}
	]
}